[
{"id": "53e99804b7602d97020196b8", "title": "Constructive topological representations", "doi": "10.1145/1128888.1128894", "issue": "", "keywords": ["constructive representation", "constructive operation", "global semantics", "cell complex", "constructive topological representation", "constructive family", "feature operation", "csg representation", "cell complex representation", "proposed constructive topological representation", "constructive solid geometry", "voronoi diagram", "euclidean space", "delaunay triangulation", "point cloud"], "lang": "en", "venue": {"raw": "Symposium on Solid Modeling and Applications"}, "year": 2006, "n_citation": 7, "page_start": "39", "page_end": "51", "volume": "", "issn": "", "isbn": "1-59593-358-1", "url": ["http://dx.doi.org/10.1145/1128888.1128894", "http://doi.acm.org/10.1145/1128888.1128894"], "abstract": "Constructive representations, such as Constructive Solid Geometry (CSG) and its various feature-based extensions are inherently parametric in nature and are well suited for defining parametric family of solids. On the other hand, cell complex representations contain explicit shape elements (cells) and also their topology. However they are non-constructive, difficult to parameterize, and it is extremely difficult to enforce continuity in the usual cell complex topology (considered as a sub-space of Euclidean space). When cell complexes are used in conjunction with constructive representations, even if we can enforce continuity in limited cases, it is impossible to relate cellular operations with global semantics of constructive operations (such as Boolean and feature operations).Using the framework developed in our earlier work for defining part families on any solid representation, we propose constructive topological representations by identifying every constructive representation with its corresponding unique spatial decomposition. By applying the proposed definitions to spatial CSG representations we will systematically develop algorithms for topologizing a CSG and also enforcing continuity between two given topologized CSG representations. These algorithms have been implemented in a prototype system about which we will briefly discuss. Finally, we will illustrate some interesting applications of the proposed constructive topological representations: specification of constructive families and the enforcement of global semantics of feature operations.", "authors": [{"id": "53f466d5dabfaedd74e6b796", "name": "Srinivas Raghothama", "org": ""}, {"id": "", "name": "UGS Corp", "org": ""}], "doc_type": "Conference", "fos": [{"name": "Topology", "w": 0.44297}, {"name": "Computer science", "w": 0.44962}, {"name": "Constructive", "w": 0.67421}, {"name": "Parametric family", "w": 0.45348}, {"name": "Constructive solid geometry", "w": 0.63561}, {"name": "Euclidean space", "w": 0.47972}, {"name": "Parametric statistics", "w": 0.44832}, {"name": "Voronoi diagram", "w": 0.46054}, {"name": "Boolean algebra", "w": 0.49289}, {"name": "Semantics", "w": 0.45548}], "indexed_abstract": {"IndexLength": 210, "InvertedIndex": {"been": [172], "discuss.": [183], "(such": [104], "about": [178], "(CSG)": [7], "semantics": [100, 206], "topologizing": [156], "Constructive": [0, 4], "extremely": [54], "relate": [95], "Finally,": [184], "complex": [33, 63], "Euclidean": [70], "Boolean": [106], "spatial": [139, 147], "if": [83], "definitions": [145], "they": [45], "between": [163], "solid": [123], "shape": [37], "sub-space": [68], "in": [16, 59, 77, 88, 113, 174], "briefly": [182], "topology": [64], "work": [116], "is": [53, 92], "it": [52, 91], "propose": [126], "explicit": [36], "as": [3, 66, 105], "extensions": [12], "system": [177], "even": [82], "cases,": [90], "cellular": [96], "unique": [138], "complexes": [74], "algorithms": [154, 170], "other": [30], "enforcing": [161], "global": [99, 205], "cell": [32, 62, 73], "representations": [34, 129, 149], "our": [114], "two": [164], "Solid": [5], "conjunction": [78], "feature": [108, 208], "are": [13, 19, 46, 75], "by": [130], "have": [171], "a": [67, 157, 175], "contain": [35], "defining": [23, 118], "prototype": [176], "Geometry": [6], "the": [29, 60, 110, 143, 192, 202], "such": [2], "topology.": [43], "When": [72], "framework": [111], "elements": [38], "By": [141], "operations.": [209], "hand,": [31], "to": [49, 56, 94, 146], "topological": [128, 195], "(cells)": [39], "used": [76], "developed": [112], "operations).Using": [109], "earlier": [115], "implemented": [173], "(considered": [65], "which": [179], "given": [165], "usual": [61], "illustrate": [187], "enforcement": [203], "its": [9, 136], "However": [44], "difficult": [48, 55], "constructive": [80, 102, 127, 133, 194, 199], "develop": [153], "topologized": [166], "suited": [21], "These": [169], "proposed": [144, 193], "enforce": [57, 86], "systematically": [152], "space).": [71], "some": [188], "identifying": [131], "parametric": [15, 24], "part": [119], "for": [22, 117, 155], "impossible": [93], "their": [42], "inherently": [14], "representation": [134], "we": [84, 125, 150, 180, 185], "non-constructive,": [47], "can": [85], "operations": [97, 103], "and": [8, 18, 40, 51, 107, 159, 201], "CSG": [148, 158, 167], "of": [26, 69, 101, 191, 198, 204, 207], "every": [132], "on": [121], "applying": [142], "feature-based": [11], "nature": [17], "limited": [89], "will": [151, 181, 186], "representations.": [168], "interesting": [189], "continuity": [58, 87, 162], "specification": [197], "also": [41, 160], "representations,": [1, 81], "families": [120, 200], "parameterize,": [50], "any": [122], "with": [79, 98, 135], "decomposition.": [140], "representation,": [124], "corresponding": [137], "various": [10], "well": [20], "representations:": [196], "family": [25], "solids.": [27], "On": [28], "applications": [190]}}, "v12_id": 2068879407, "v12_authors": [{"name": "Srinivas Raghothama", "org": "UGS Corp, Cypress, CA", "id": 2982809147}], "references": ["53e99804b7602d9702019302", "53e99854b7602d970208e49f", "53e99b77b7602d970241b93e", "53e9a09fb7602d9702986ca1", "53e9ac3db7602d9703607889", "53e9b5bcb7602d9704101cbb", "53e9b5fab7602d970414adfd", "53e9b607b7602d970415bc42", "53e9b709b7602d97042a1c3d", "53e9b797b7602d970433e9c1", "53e9bd5fb7602d97049fc519"]},
{"id": "53e99804b7602d9702019302", "title": "Contification using dominators", "doi": "10.1145/507669.507639", "issue": "10", "keywords": ["loop optimization", "functional language", "control flow", "call graph", "program optimization", "compiler optimization"], "lang": "en", "venue": {"raw": "Special Interest Group on Programming Languages"}, "year": 2001, "n_citation": 39, "page_start": "2", "page_end": "13", "volume": "36", "issn": "0362-1340", "isbn": "1-58113-415-0", "url": ["http://dx.doi.org/10.1145/507546.507639", "http://doi.acm.org/10.1145/507635.507639", "http://dx.doi.org/10.1145/507635.507639", "https://dl.acm.org/doi/abs/10.1145/507669.507639", "http://www.webofknowledge.com/"], "abstract": "Contification is a compiler optimization that turns a function that always returns to the same place into a continuation. Compilers for functional languages use contification to expose the control-flow information that is required by many optimizations, including traditional loop optimizations. This paper gives a formal presentation of contification in MLton, a whole-program optimizing Standard ML compiler. We present two existing algorithms for contification in our framework, as well as a new algorithm based on the dominator tree of a program's call graph. We prove that the dominator algorithm is optimal. We present benchmark results on realistic SML programs demonstrating that contification has minimal overhead on compile time and significantly improves run time.\n\n", "authors": [{"id": "53f46ba8dabfaedd74e7ef8c", "name": "Matthew Fluet", "org": "Cornell Univ."}, {"id": "54407cb7dabfae805a6c4ae6", "name": "Stephen Weeks", "org": "InterTrust STAR Laboratories"}], "doc_type": "Conference", "fos": [{"name": "MLton", "w": 0.65043}, {"name": "Programming language", "w": 0.46553}, {"name": "Standard ML", "w": 0.5445}, {"name": "Functional programming", "w": 0.50038}, {"name": "Compile time", "w": 0.58324}, {"name": "Computer science", "w": 0.45856}, {"name": "Parallel computing", "w": 0.46446}, {"name": "Theoretical computer science", "w": 0.46112}, {"name": "Call graph", "w": 0.55358}, {"name": "Optimizing compiler", "w": 0.6072}, {"name": "Compiler", "w": 0.57131}, {"name": "Dominator", "w": 0.5709}], "indexed_abstract": {"IndexLength": 112, "InvertedIndex": {"use": [23], "improves": [109], "run": [110], "required": [32], "turns": [6], "presentation": [45], "that": [5, 9, 30, 84, 99], "MLton,": [49], "realistic": [95], "compile": [105], "optimization": [4], "time.": [111], "loop": [38], "function": [8], "graph.": [81], "This": [40], "optimizing": [52], "has": [101], "results": [93], "contification": [24, 47, 62, 100], "ML": [54], "algorithm": [71, 87], "always": [10], "new": [70], "based": [72], "including": [36], "programu0027s": [79], "in": [48, 63], "optimal.": [89], "overhead": [103], "tree": [76], "is": [1, 31, 88], "benchmark": [92], "formal": [44], "traditional": [37], "whole-program": [51], "as": [66, 68], "continuation.": [18], "SML": [96], "returns": [11], "programs": [97], "present": [57, 91], "Compilers": [19], "algorithms": [60], "functional": [21], "prove": [83], "for": [20, 61], "Standard": [53], "two": [58], "our": [64], "into": [16], "optimizations.": [39], "minimal": [102], "same": [14], "paper": [41], "compiler.": [55], "and": [107], "by": [33], "of": [46, 77], "place": [15], "compiler": [3], "demonstrating": [98], "Contification": [0], "gives": [42], "framework,": [65], "optimizations,": [35], "on": [73, 94, 104], "a": [2, 7, 17, 43, 50, 69, 78], "control-flow": [28], "languages": [22], "many": [34], "expose": [26], "We": [56, 82, 90], "the": [13, 27, 74, 85], "dominator": [75, 86], "call": [80], "existing": [59], "well": [67], "information": [29], "to": [12, 25], "time": [106], "significantly": [108]}}, "v12_id": 1995535937, "v12_authors": [{"name": "Matthew Fluet", "org": "Cornell University;", "id": 2668625909}, {"name": "Stephen Weeks", "org": "InterTrust STAR Laboratories", "id": 2232955512}], "references": ["53e998b8b7602d97020f4474", "53e99b16b7602d97023abf6a", "53e9a381b7602d9702c8fc37", "53e9a3edb7602d9702d02904", "53e9a5d3b7602d9702f00eac", "53e9a81fb7602d97031681bc", "53e9aa61b7602d97033d0a7c", "53e9addab7602d97037e1768", "53e9b2d6b7602d9703d869d0", "53e9b414b7602d9703f0ebb0", "53e9b505b7602d970403a0cd", "53e9b512b7602d9704045246", "53e9b8b4b7602d9704494505", "53e9b954b7602d970454162c"]},
{"id": "53e99808b7602d970201a746", "title": "Computing with shapes", "doi": "10.1006/jvlc.2001.0205", "issue": "6", "keywords": ["computability model", "turing machine", "shape grammar", "correct computations square", "current picture", "specified polyomino", "difficult task", "adjoining polyominoes", "picture language", "sequencing mapping", "chomsky hierarchy", "interactive visualization", "computer model"], "lang": "en", "venue": {"raw": "Computing with shapes"}, "year": 2001, "n_citation": 29, "page_start": "601", "page_end": "626", "volume": "12", "issn": "1045-926X", "isbn": "", "url": ["http://dx.doi.org/10.1006/jvlc.2001.0205", "https://www.sciencedirect.com/science/article/pii/S1045926X01902058", "http://www.webofknowledge.com/", "https://dl.acm.org/doi/10.1006/jvlc.2001.0205"], "abstract": "We introduce a computability model - called shape grammar - based on adjoining polyominoes. A computation in a shape grammar is correct when: (1) it starts by using a specified polyomino; (2) it ends when a rectangle is obtained (without holes); (3) at any step the current picture is connected; and (4) a sequencing mapping is given, so that at every step (except the first one) we use a polyomino depending on the previously used polyomino, as specified by this mapping (such a condition is essential for interactive visual languages, as formalized in [2], [3]). If strings of symbols are associated with the polyominoes, then a string language can be associated to a computation. Surprisingly enough, in these circumstances we can characterize the recursively enumerable languages (hence the power of Turing machines). If we preserve only conditions (1), (2), and (3) above, then we cannot generate all linear languages but we can generate all regular languages and strictly more: also some one-letter non-regular languages can be obtained. In particular, we can obtain as correct computations squares only, which is often a difficult task in picture languages (see, e.g., [32]).", "authors": [{"id": "560c2f6c45cedb33974c3889", "name": "Paolo Bottoni", "org": "Department of Computer Science, University of Rome \u201cLa Sapienza\u201d Via Salaria 113, 00198, Roma, Italyf1bottoni@dsi.uniroma1.itf1"}, {"id": "5448a5e2dabfae87b7e58de9", "name": "Giancarlo Mauri", "org": "Department of Computer Science, Systems and Communication, University of Milano Bicocca, Via Bicocca degli Arcimboldi 8, 20126, Milano, Italyf2mauri@disco.unimib.itf2"}, {"id": "53f42e94dabfaee1c0a42e2a", "name": "Piero Mussio", "org": "Department of Electronics for Automation, University of Brescia, Via Branze 38, 25123, Brescia, Italyf3mussio@bsing.ing.unibs.itf3"}, {"id": "5440978edabfae805a6d8884", "name": "Gheorghe Paun", "org": "Institute of Mathematics of the Romanian Academy, 1-764, 70700, Bucure\u015fti, Romaniaf4gpaun@imar.rof4"}], "doc_type": "Journal", "fos": [{"name": "Data mining", "w": 0.43162}, {"name": "Computer science", "w": 0.45042}, {"name": "Polyomino", "w": 0.54914}, {"name": "Recursively enumerable language", "w": 0.56837}, {"name": "Chomsky hierarchy", "w": 0.52899}, {"name": "Computability", "w": 0.59852}, {"name": "Theoretical computer science", "w": 0.46588}, {"name": "Turing machine", "w": 0.528}, {"name": "Concatenation", "w": 0.5117}, {"name": "Cone (formal languages)", "w": 0.62506}, {"name": "Regular language", "w": 0.51926}], "indexed_abstract": {"IndexLength": 265, "InvertedIndex": {"polyomino;": [103], "frameworks": [17], "(such": [154], "interactive": [160], "(see,": [262], "languages,": [162], "alphabet": [78], "machines).": [207], "when": [107], "sequencing": [126], "these": [193], "depending": [143], "polyomino,": [148], "visual": [42, 161], "obtained.": [242], "formalized": [164], "1,": [166], "case": [38], "based": [59], "(hence": [202], "using": [100], "mapping": [127, 153], "Surprisingly": [190], "shape": [31, 90], "in": [39, 70, 88, 165, 182, 192, 259], "squares": [251], "is": [50, 93, 110, 121, 128, 157, 254], "it": [97, 105], "then": [218], "each": [83], "computation.": [189], "above,": [217], "as": [52, 149, 163, 248], "system": [92], "at": [115, 132], "concepts": [46], "holes);": [113], "set.": [67], "evaluating": [19], "obtained": [111], "conditions": [212], "If": [208], "(1)": [96], "A": [68, 86], "be": [48, 80, 241], "Shape": [55], "In": [23, 243], "non-regular": [238], "specified": [102, 150], "only,": [252], "how": [171], "current": [119], "concatenated": [178], "strings": [181], "systems": [57], "are": [58, 177], "(without": [112], "communicational": [7], "by": [10, 99, 151], "power": [204], "so": [130], "(except": [135], "regular": [230], "(2)": [104, 214], "established": [15], "a": [3, 28, 53, 65, 74, 89, 101, 108, 125, 141, 155, 183, 256], "completion": [32, 56, 91], "enough,": [191], "linear": [223], "languages": [1, 201, 224, 231, 239, 261], "end-user": [11], "adjoining": [61], "picture": [120, 260], "computation": [87], "the": [6, 34, 41, 45, 71, 118, 136, 145, 175, 188, 198, 203], "polyominoes,": [62], "characterize": [197], "associated": [81, 173, 186], "cannot": [220], "to": [5, 47, 179], "polyomino": [142], "(3)": [114, 216], "first": [137], "represent": [2], "essential": [158], "but": [13, 36, 225], "correct": [94, 249], "use": [140], "computability": [16, 29], "shape.": [85], "paper,": [25], "language": [185], "used": [147], "given,": [129], "that": [131], "particular,": [244], "connected;": [122], "only": [211], "3).": [264], "from": [64], "starts": [98], "(4)": [124], "generate": [221, 228], "system?for": [33], "computing,": [12], "computational": [21], "which": [40, 253], "all": [222, 229], "obtain": [247], "circumstances": [194], "this": [24, 152], "difficult": [257], "often": [255], "preserve": [210], "polyominoes": [176], "Turing": [206], "posed": [9], "model?called": [30], "establish": [170], "lack": [14], "more:": [234], "condition": [156], "task": [258], "one)": [138], "rectangle": [109], "power.": [22], "basic": [66, 84], "some": [77, 236], "string": [75, 184], "challenges": [8], "restricted,": [35], "for": [18, 159], "their": [20], "description": [69], "recursively": [199], "representation": [43], "one-letter": [237], "we": [26, 139, 195, 209, 219, 226, 245], "symbols": [172], "can": [79, 196, 227, 240, 246], "previously": [146], "shapes": [63], "and": [123, 215, 232], "of": [44, 73, 205], "ends": [106], "2).": [167], "enumerable": [200], "every": [133], "Visual": [0], "on": [60, 76, 144], "puzzle.": [54], "computations": [250], "built": [51], "introduce": [27], "also": [169, 235], "any": [116], "We": [168], "strictly": [233], "with": [82, 174, 187], "form": [72, 180], "response": [4], "important,": [37], "communicated": [49], "step": [117, 134], "when:": [95], "(1),": [213], "e.g.": [263]}}, "v12_id": 2059491711, "v12_authors": [{"name": "Paolo Bottoni", "org": "Department of Computer Science, University of Rome \u201cLa Sapienza\u201d Via Salaria 113, 00198, Roma, Italyf1bottoni@dsi.uniroma1.itf1#TAB#", "id": 67175421}, {"name": "Giancarlo Mauri", "org": "Department of Computer Science, Systems and Communication, University of Milano Bicocca, Via Bicocca degli Arcimboldi 8, 20126, Milano, Italyf2mauri@disco.unimib.itf2#TAB#", "id": 2102122772}, {"name": "Piero Mussio", "org": "Department of Electronics for Automation, University of Brescia, Via Branze 38, 25123, Brescia, Italyf3mussio@bsing.ing.unibs.itf3#TAB#", "id": 400340630}, {"name": "Gheorghe Pun", "org": "Institute of Mathematics of the Romanian Academy#TAB#", "id": 2169118297}], "references": ["53e99866b7602d97020a09de", "53e99d6cb7602d97026285ce", "53e99f94b7602d9702866efc", "53e9a2fab7602d9702c02211", "53e9a310b7602d9702c19037", "53e9a439b7602d9702d5557b", "53e9a4e4b7602d9702e059da", "53e9a80cb7602d970314f89f", "53e9adffb7602d9703805b1a", "53e99808b7602d970201a746", "53e9b31cb7602d9703de94b1", "53e9b4c3b7602d9703fdd692", "53e9b762b7602d9704308037", "558b1494e4b0b32fcb3aa135", "53e99803b7602d9702013350", "53e9b221b7602d9703cbcc4c", "555040e745ce0a409eb376d3", "53e9b7c1b7602d970436d76d", "53e99ae6b7602d970236e4fb", "53e9aef7b7602d9703927503", "53e9a66eb7602d9702fa086e", "555040e745ce0a409eb376eb", "53e99808b7602d970201b4dc", "53e9a5beb7602d9702ee8c01"]},
{"id": "53e99808b7602d970201b4dc", "title": "Conjugate linear filtering", "doi": "10.1109/TIT.1969.1054330", "issue": "4", "keywords": ["gaussian case", "linear-conjugate linear receiver", "squares nonlinear receiver", "conjugate processing", "receiver noise", "filter receiver", "conjugate linear filter", "conjugate linear processing", "special correlation property", "ordinary linear filter", "matched filter", "demodulation", "signal processing", "matched filters", "mean square error", "random process", "signal to noise ratio", "filtering", "random processes", "linear filtering", "least square"], "lang": "en", "venue": {"raw": "IEEE Transactions on Information Theory"}, "year": 1969, "n_citation": 130, "page_start": "462", "page_end": "465", "volume": "15", "issn": "0018-9448", "isbn": "", "url": ["http://dx.doi.org/10.1109/TIT.1969.1054330", "http://www.webofknowledge.com/", "http://ieeexplore.ieee.org/xpl/abstractAuthors.jsp?tp=&arnumber=1054330"], "abstract": "Aspects of optimum filtering for complex valued random processes are presented. Ordinary linear filters are complemented with conjugate linear filters. It is found that the incorporation of conjugate linear filtering improves signal-to-noise ratio by a factor of two in matched filter receivers. For optimum least squares filtering the inclusion of conjugate processing reduces mean-square error by a factor as great as two; the improvement depends primarily on the degree of correlation between the real and imaginary parts of the signal process. The analysis utilizes special correlation properties of receiver noise. Also, in the absence of phase lock, conjugate linear processing offers no improvement. Finally, it is observed that in the Gaussian case the least squares nonlinear receiver for modulations consists of the derived linear-conjugate linear receiver followed by demodulators comparable to those used in practice.", "authors": [{"id": "", "name": "W. Brown", "org": ""}, {"id": "", "name": "R. Crane", "org": ""}, {"id": "", "name": "Brown, William M.", "org": ""}, {"id": "", "name": "Crane, Robert B.", "org": ""}], "doc_type": "Journal", "fos": [{"name": "Least squares", "w": 0.57424}, {"name": "Discrete mathematics", "w": 0.41094}, {"name": "Nonlinear system", "w": 0.50482}, {"name": "Median filter", "w": 0.57589}, {"name": "Linear filter", "w": 0.56675}, {"name": "Control theory", "w": 0.43171}, {"name": "Algorithm", "w": 0.44597}, {"name": "Filter (signal processing)", "w": 0.55517}, {"name": "Conjugate", "w": 0.53389}, {"name": "Gaussian", "w": 0.48902}, {"name": "Matched filter", "w": 0.59824}, {"name": "Mathematics", "w": 0.38896}], "indexed_abstract": {"IndexLength": 135, "InvertedIndex": {"incorporation": [25], "improves": [30], "mean-square": [53], "process.": [80], "used": [132], "nonlinear": [115], "observed": [106], "filters.": [19], "conjugate": [17, 27, 50, 97], "that": [23, 107], "Finally,": [103], "complex": [5], "filtering": [3, 29, 46], "signal": [79], "between": [71], "case": [111], "those": [131], "Ordinary": [11], "phase": [95], "offers": [100], "receiver": [88, 116, 125], "in": [38, 91, 108, 133], "depends": [64], "practice.": [134], "presented.": [10], "For": [42], "squares": [45, 114], "degree": [68], "is": [21, 105], "real": [73], "it": [104], "analysis": [82], "utilizes": [83], "as": [58, 60], "demodulators": [128], "receivers.": [41], "correlation": [70, 85], "parts": [76], "processing": [51, 99], "matched": [39], "improvement.": [102], "no": [101], "lock,": [96], "absence": [93], "for": [4, 117], "least": [44, 113], "It": [20], "error": [54], "two": [37], "primarily": [65], "The": [81], "linear-conjugate": [123], "random": [7], "inclusion": [48], "found": [22], "are": [9, 14], "and": [74], "noise.": [89], "of": [1, 26, 36, 49, 69, 77, 87, 94, 120], "by": [33, 55, 127], "two;": [61], "reduces": [52], "factor": [35, 57], "derived": [122], "on": [66], "a": [34, 56], "processes": [8], "linear": [12, 18, 28, 98, 124], "Also,": [90], "signal-to-noise": [31], "optimum": [2, 43], "filters": [13], "complemented": [15], "improvement": [63], "great": [59], "followed": [126], "modulations": [118], "the": [24, 47, 62, 67, 72, 78, 92, 109, 112, 121], "filter": [40], "special": [84], "with": [16], "imaginary": [75], "valued": [6], "Aspects": [0], "consists": [119], "Gaussian": [110], "to": [130], "comparable": [129], "properties": [86], "ratio": [32]}}, "v12_id": 1999666226, "v12_authors": [{"name": "W. Brown", "id": 2704408869}, {"name": "R. Crane", "id": 2685627479}], "references": ["53e9ae3cb7602d9703855069"]},
{"id": "53e99808b7602d970201b76f", "title": "Constraint Logic Programming", "doi": "10.1007/3-540-45628-7_19", "issue": "", "keywords": ["great deal", "particular constraint propagation", "large scale combinatorial optimisation", "information systems", "clp system", "clp scheme", "logic programming", "backwards reasoning", "specific constraint", "constraint logic programming"], "lang": "en", "venue": {"raw": "Birthday ..."}, "year": 2002, "n_citation": 138, "page_start": "512", "page_end": "532", "volume": "2407", "issn": "0302-9743", "isbn": "3-540-43959-5", "url": ["http://dx.doi.org/10.1007/3-540-45628-7_19", "http://www.webofknowledge.com/"], "abstract": "Constraint Logic Programming (CLP) extends logic programming in two ways. Firstly it admits special predicates called constraints,\n which are not defined by clauses, but which are handled instead by specific constraint solvers built into the CLP system.\n This extension has been formalised as the CLP Scheme. Secondly CLP admits other forms of processing than backwards reasoning\n by unfolding, in particular constraint propagation. This extension has been formalised in terms of Information Systems. These\n two extensions are now widely applied in industry, in particular to large scale combinatorial optimisation problems. The success\n of CLP has inspired a great deal of ongoing research into algorithms (especially hybrid and incremental), languages and applications.\n ", "authors": [{"id": "", "name": "Mark Wallace", "org": "Univ London Imperial Coll Sci Technol & Med, William Penny Lab, IC Parc, London SW7 2AZ, England"}, {"id": "54067b55dabfae92b4209e52", "name": "Alexander Herold", "org": "ECRC European Computer-Industry Research Centre Arabellastr. 17 D-8000 Munich 81 Germany"}, {"id": "53f364e5dabfae4b34995de7", "name": "Volker Kiichenhoff", "org": "ECRC European Computer-Industry Research Centre Arabellastr. 17 D-8000 Munich 81 Germany"}, {"id": "53f44b31dabfaec09f1dc1a3", "name": "Thierry Le Provost", "org": "ECRC European Computer-Industry Research Centre Arabellastr. 17 D-8000 Munich 81 Germany"}, {"id": "53f43b70dabfaee02acfc8bf", "name": "Pierre Lim", "org": "ECRC European Computer-Industry Research Centre Arabellastr. 17 D-8000 Munich 81 Germany"}, {"id": "5405b76fdabfae91d300570f", "name": "Eric Monfroy", "org": "ECRC European Computer-Industry Research Centre Arabellastr. 17 D-8000 Munich 81 Germany"}, {"id": "53f45e86dabfaee1c0b4b1d2", "name": "Mark Wallace", "org": "ECRC European Computer-Industry Research Centre Arabellastr. 17 D-8000 Munich 81 Germany"}], "doc_type": "Conference", "references": ["53e9a0f4b7602d97029dea71", "53e9b360b7602d9703e4102f", "53e9bcf6b7602d970497fc9a", "53e997a6b7602d9701f7a7c4", "53e99808b7602d970201b764", "53e99808b7602d970201b771", "53e9980eb7602d9702022c7a", "53e99813b7602d970202dcc0", "53e9981db7602d970203a9aa", "53e9981db7602d970203c676", "53e99838b7602d970205f472", "53e999fab7602d970223fd8b", "53e99a19b7602d970226be7d", "53e99a7fb7602d97022f4c70", "53e99b21b7602d97023b4d65", "53e99b8db7602d97024360fd", "53e99d2fb7602d97025e36ea", "53e99f9bb7602d9702872c87", "53e9a018b7602d97028fb12e", "53e9a0dfb7602d97029cc83b", "53e9a0f4b7602d97029dea71", "53e9a138b7602d9702a2abd0", "53e9a202b7602d9702b01046", "53e9a31fb7602d9702c27421", "53e9a509b7602d9702e2c63c", "53e9a5e1b7602d9702f0a4c6", "53e9a5e9b7602d9702f152cc", "53e9a704b7602d970303bded", "53e9a77bb7602d97030b5392", "53e9a9b0b7602d970330f019", "53e9a9bdb7602d9703319db7", "53e9a9f0b7602d970335a917", "53e9aa16b7602d9703382664", "53e9ab20b7602d97034a8449", "53e9ab4fb7602d97034e0db8", "53e9ac42b7602d970360c554", "53e9ac48b7602d9703613ea3", "53e9ac48b7602d970361647e", "53e9ac55b7602d9703628b37", "53e9ad33b7602d9703713f60", "53e9ad6db7602d970375b6e3", "53e9adf6b7602d97038003d5", "53e9ae8fb7602d97038ad891", "53e9ae90b7602d97038b26f5", "53e9b0d8b7602d9703b520bf", "53e9b174b7602d9703bfc185", "53e9b181b7602d9703c0a414", "53e9b360b7602d9703e4102f", "53e9b37ab7602d9703e5ad81", "53e9b414b7602d9703f0cf11", "53e9b4d4b7602d9703ff4be4", "53e9b4eeb7602d97040180e4", "53e9b5afb7602d97040f7d58", "53e9b6b9b7602d97042400fb", "53e9b790b7602d97043394c7", "53e9b7adb7602d97043554f3", "53e9b808b7602d97043be989", "53e9b8c7b7602d97044a5ddb", "53e9b97cb7602d970456ce4f", "53e9ba7db7602d970469e5e7", "53e9bb3db7602d970477accb", "53e9bcf6b7602d970497fc9a", "5c8a78604895d9cbc62cca93", "53e9be2eb7602d9704ae83bb", "53e9ac28b7602d97035e8abe", "53e99b1bb7602d97023b2f11", "53e99809b7602d970201fd34", "558278430cf2b2c1f110da13", "53e9bce7b7602d970496a8a0", "53e99a3cb7602d9702297295", "53e9a870b7602d97031bf624", "53e9b2ccb7602d9703d77a75", "53e9a35fb7602d9702c6898e", "53e9acd2b7602d97036ae57e", "53e99808b7602d970201b76f", "53e9ab20b7602d97034a6b60", "53e99a74b7602d97022e3c07", "53e9ad5db7602d9703744141", "53e9b708b7602d970429e561", "53e99be3b7602d970248a175", "53e9b564b7602d970409abdd", "53e9bd50b7602d97049e2448", "53e9ad33b7602d970371524e", "53e998ceb7602d970210a393", "53e9a0d1b7602d97029b7c0e", "53e99d44b7602d97025f8a44", "53e9a091b7602d970297782d", "53e9ac42b7602d970360d2f3", "53e9a658b7602d9702f89dcc", "53e99b31b7602d97023d05d6", "53e99808b7602d9702019ff5", "53e9ab82b7602d970352f8fd", "53e99a92b7602d970230b4bf", "573696736e3b12023e57f586", "53e99ae2b7602d9702367ed0", "53e9a645b7602d9702f748e7", "53e99b86b7602d970242c155", "53e9aafab7602d9703479f15", "53e9a464b7602d9702d8045b", "5c8629ba4895d9cbc626d112", "53e9afeeb7602d9703a44c39", "53e9b036b7602d9703a93236", "53e99808b7602d970201c0ff", "53e9b0eeb7602d9703b6b924", "53e9a8dbb7602d9703229547", "53e9a5a8b7602d9702ed4a15", "53e9a863b7602d97031b153b", "53e9bc61b7602d97048dc7c8", "53e9b904b7602d97044eb19e", "53e9baecb7602d970471c073", "53e999fab7602d9702244e19", "53e9be22b7602d9704ade3a3", "558ae888e4b0b32fcb39981a", "53e9b500b7602d9704030725"]},
{"id": "53e99808b7602d970201c0ff", "title": "Constructive modal logics", "doi": "10.1016/0168-0072(90)90059-B", "issue": "3", "keywords": ["constructive modal logic"], "lang": "en", "venue": {"raw": "Constructive modal logics"}, "year": 1990, "n_citation": 117, "page_start": "271", "page_end": "301", "volume": "50", "issn": "Annals of Pure and Applied Logic", "isbn": "", "url": [], "abstract": "We often have to draw conclusions about states of machines in computer science and about states of knowledge and belief in artificial intelligence (AI) based on partial information. Nerode (1990) suggested using constructive (equivalently, intuitionistic) logic as the language to express such deductions and also suggested designing appropriate intuitionistic Kripke frames to express the partial information. Following this program, Nerode and Wijesekera (1990) developed syntax, semantics and completeness for a system of intuitionistic dynamic logic for proving properties of concurrent programs. Like all dynamics logics, this was a logic of many modalities, each expressing a program, but in intuitionistic rather than in classical logic. In that logic, both box and diamond are needed, but these two are not intuitionistically interdefinable and, worse, diamond does not distribute over \u2018or\u2019, except for sequential programs. This also happens in other contemplated computer science and AI applications, and leads outside the class of constructive logics investigated in the literature. The present paper fills this gap. We provide intuitionistic logics with independent box and diamond without assuming distribution of diamond over \u2018or\u2019. The completeness theorem is based on intuitionistic Kripke frames (partially ordered sets of increasing worlds), but equipped with an additional, quite separate accessibility relation between worlds. In the interpretation of Nerode and Wijesekera (1990), worlds under the partial order represent states of partial knowledge, the accessibility represents change in state of partial knowledge resulting from executing a specific program. But there are many other computer science interpretations. This formalism covers all computer science applications of which we are aware. We also give a cut elimination theorem and algebraic and topological formulations, since these present some new difficulties. Finally, these results were obtained prior to those in Nerode and Wijesekera (1990).", "authors": [{"id": "54059712dabfae92b41e7560", "name": "Duminda Wijesekera", "org": "Cornell Univ., Ithaca, NY"}], "doc_type": "Journal", "fos": [{"name": "Intuitionistic logic", "w": 0.59228}, {"name": "Discrete mathematics", "w": 0.43869}, {"name": "Accessibility relation", "w": 0.68997}, {"name": "Kripke semantics", "w": 0.67087}, {"name": "Concurrency", "w": 0.58342}, {"name": "Constructive", "w": 0.57789}, {"name": "Propositional calculus", "w": 0.56948}, {"name": "Modal logic", "w": 0.63677}, {"name": "Mathematics", "w": 0.4123}, {"name": "Intermediate logic", "w": 0.5911}], "indexed_abstract": {"IndexLength": 173, "InvertedIndex": {"sequent": [107], "accessibility": [98, 134], "semantics": [77], "calculus": [108, 127], "theorems": [122], "relation": [99], "cover": [142], "Constructive": [0], "introduced": [166], "partial,": [36], "obtained.": [124], "model": [74], "between": [137], "defined": [152], "knowledge": [39, 93], "order": [87], "models": [80, 150], "in": [7, 25], "enriched": [129], "is": [43, 46, 51, 67, 78, 109, 128, 165], "then": [168], "total,": [38], "version": [160], "Topological": [147], "versions": [1], "science": [33], "philosophical": [23], "semantics,": [119], "whereby": [120], "partial": [86, 92], "A": [104, 158], "logics": [18, 71], "worlds": [89], "cut": [105], "be": [112, 136, 156], "extended": [169], "The": [17, 76, 125], "computer": [32], "same": [102], "feature": [66], "are": [5, 14, 29, 123, 151], "operators": [13], "does": [59], "where": [35, 49], "distribute": [61], "free": [106], "a": [85, 95], "intuitionistic": [91], "sets": [140], "concurrency.": [75, 146, 172], "makes": [69], "disjunction,": [63], "available,": [47], "concurrency": [50], "the": [9, 70, 101, 117, 132], "constructivised": [159], "complete.": [157], "logic": [4, 164], "to": [73, 111, 116, 130, 135, 141, 145, 155, 170], "complete": [113], "constructivity,": [26], "but": [27], "do": [19], "incorporate": [171], "developed": [6], "second": [96], "points": [138], "logics,": [57], "that": [45], "allowed.": [52], "shown": [110, 154], "from": [22], "dynamic": [163], "Unlike": [53], "modal": [3, 56, 133], "which": [8], "all": [44], "\"possible": [82], "this": [65], "constructive": [55], "respect": [115], "proposed": [118], "Kripke": [79], "basic": [126], "necessity": [12], "allow": [131], "algebraic": [149], "rather": [28], "worlds.": [103], "sequential": [162], "for": [31, 90], "worlds\"": [83], "states": [42], "not": [15, 20, 37, 60], "interest": [24], "and": [11, 48, 64, 94, 139, 148, 153, 167], "intended": [143], "of": [2, 40, 81, 161], "possibility": [10], "designed": [30], "on": [88, 100], "over": [62], "previous": [54], "arbitrary": [97], "interdefinable.": [16], "with": [84, 114], "diamond": [58], "interpolation": [121], "what": [68], "suitable": [72], "machines": [41], "stem": [21], "applications": [34, 144]}}, "v12_id": 2067278394, "v12_authors": [{"name": "Duminda Wijesekera", "org": "Cornell University, Ithaca -- NY", "id": 2924486879}], "references": ["53e99e85b7602d970274b7f1", "53e9a1d5b7602d9702acd3e8", "53e9a555b7602d9702e7da90", "53e9a682b7602d9702fb4152", "53e9ac42b7602d9703610d00", "53e9b04eb7602d9703ab360c", "53e9b2f4b7602d9703db0c6b", "53e9bb44b7602d97047851b0"]}
]